name: Update Webhook Secret

on:
  # Manual trigger with inputs
  workflow_dispatch:
    inputs:
      hook_id:
        description: 'Webhook ID to update'
        required: true
        type: string
        default: '550562904'
      repo:
        description: 'Repository in format owner/repo'
        required: true
        type: string
        default: 'shain1999/test-repo'
      secret_name:
        description: 'Name of the secret containing the new webhook secret'
        required: true
        type: string
        default: 'ado_pat_pipeline_sync_invoker'
      webhook_url:
        description: 'URL for the pipeline to invoke'
        required: true
        type: string
        default: 'https://dev.azure.com/WSSI-AMD/Carneros/_apis/pipelines/88/runs?api-version=7.2-preview.1'
  
  # Optional: Schedule for automatic secret rotation
  # Uncomment to enable periodic updates
  # schedule:
  #   - cron: '0 0 1 * *'  # Monthly on the 1st at midnight

jobs:
  update-webhook:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      
    steps:
    - name: Mask webhook secret
      run: |
        echo "::add-mask::${{ secrets[github.event.inputs.secret_name] || secrets.ado-pat-pipeline-sync-invoker }}"
        
    - name: Update webhook secret
      env:
        GH_TOKEN: ${{ secrets.WEBHOOK_GH_PAT }}
        WEBHOOK_SECRET: ${{ secrets[github.event.inputs.secret_name] || secrets.ado-pat-pipeline-sync-invoker }}
        HOOK_ID: ${{ github.event.inputs.hook_id || '550562904' }}
        REPO: ${{ github.event.inputs.repo || 'shain1999/test-repo' }}
        WEBHOOK_URL:     ${{ github.event.inputs.webhook_url }}  

      run: |
        echo "Updating webhook $HOOK_ID for repository $REPO"
        
        # Make the API call to update the webhook
        RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH \
          -H "Authorization: token $GH_PAT" \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/$REPO/hooks/$HOOK_ID \
          -d '{
              "config": {
                "url": "'"$WEBHOOK_URL"'",
                "content_type": "json",
                "secret": "'"$WEBHOOK_SECRET"'",
                "insecure_ssl": "0"
                }
              }')

        # Extract HTTP status code
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')
        
        # Check if the update was successful
        if [ "$HTTP_CODE" -eq 200 ]; then
          echo "‚úÖ Successfully updated webhook secret"
          echo "Webhook ID: $HOOK_ID"
          echo "Repository: $REPO"
        else
          echo "‚ùå Failed to update webhook secret"
          echo "HTTP Status Code: $HTTP_CODE"
          echo "Response: $BODY"
          exit 1
        fi
        
    - name: Verify webhook configuration
      if: success()
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HOOK_ID: ${{ github.event.inputs.hook_id || '12345678' }}
        REPO: ${{ github.event.inputs.repo || 'shain1999/test-repo' }}
      run: |
        # Get webhook details to verify update
        WEBHOOK_INFO=$(curl -s -X GET \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/$REPO/hooks/$HOOK_ID)
        
        # Extract relevant information
        ACTIVE=$(echo "$WEBHOOK_INFO" | jq -r '.active')
        URL=$(echo "$WEBHOOK_INFO" | jq -r '.config.url')
        EVENTS=$(echo "$WEBHOOK_INFO" | jq -r '.events | join(", ")')
        
        echo "üìã Webhook Configuration:"
        echo "   Active: $ACTIVE"
        echo "   URL: $URL"
        echo "   Events: $EVENTS"
